volumes:
  certs:
    driver: local
  elasticsearchdata:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata:
    driver: local
#  filebeatdata01:
#    driver: local
  logstashdata:
    driver: local
#  fleetserverdata:
#    driver: local

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    networks:
      - kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  eureka-server:
    image: kiryahandsome/eureka-server:latest
    container_name: eureka-server
    ports:
      - 8761:8761
    restart: always
    networks:
      - discovery

  gateway:
    image: kiryahandsome/gateway:latest
    container_name: gateway
    ports:
      - 8888:8888
    depends_on:
      - eureka-server
    restart: always
    networks:
      - discovery
      - gateway
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/

  gateway-cache:
    image: redis:7-alpine
    container_name: gateway-cache
    restart: always
    ports:
      - 6379:6379
    networks:
      - gateway
    deploy:
      resources:
        limits:
          memory: 512M

  passenger:
    image: kiryahandsome/passenger:latest
    container_name: passenger
    depends_on:
      - eureka-server
      - passenger_db
      - kafka
    networks:
      - passenger
      - kafka
      - discovery
    ports:
      - 8080:8080
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://passenger_db:5432/passenger
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  passenger_db:
    image: postgres:15-alpine
    container_name: passenger_db
    restart: always
    networks:
      - passenger
    ports:
      - 5433:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=passenger

  driver:
    image: kiryahandsome/driver:latest
    container_name: driver
    depends_on:
      - driver_db
      - eureka-server
    networks:
      - driver
      - kafka
      - discovery
    ports:
      - 8081:8081
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://driver_db:5432/driver
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  driver_db:
    image: postgres:15-alpine
    container_name: driver_db
    restart: always
    networks:
      - driver
    ports:
      - 5434:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=driver

  ride:
    image: kiryahandsome/ride:latest
    container_name: ride
    depends_on:
      - ride_db
      - kafka
      - eureka-server
    networks:
      - ride
      - kafka
      - discovery
    ports:
      - 8082:8082
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATA_MONGODB_HOST=ride_db
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DRIVER_URL=driver:8081

  ride_db:
    image: mongo:7.0
    container_name: ride_db
    ports:
      - 27018:27017
    networks:
      - ride
    environment:
      - MONGO_INITDB_DATABASE=ride

  payment:
    image: kiryahandsome/payment:latest
    container_name: payment
    depends_on:
      - payment_db
      - eureka-server
    networks:
      - payment
      - kafka
      - discovery
    ports:
      - 8083:8083
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://payment_db:5432/payment
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  payment_db:
    image: postgres:15-alpine
    container_name: payment_db
    restart: always
    networks:
      - payment
    ports:
      - 5435:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=payment

  rating:
    image: kiryahandsome/rating:latest
    container_name: rating
    depends_on:
      - rating_db
      - eureka-server
    networks:
      - rating
      - kafka
      - discovery
    ports:
      - 8084:8084
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://rating_db:5432/rating
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  rating_db:
    image: postgres:15-alpine
    container_name: rating_db
    restart: always
    networks:
      - rating
    ports:
      - 5436:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rating

  setup:
    image: elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - fleet-server\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    networks:
      - elk
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearchdata:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: logstash:${STACK_VERSION}
    ports:
      - 5400:5400
      - 5000:5000/tcp
      - 5000:5000/udp
      - 9600:9600
    labels:
      co.elastic.logs/module: logstash
    user: root
    networks:
      - elk
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata:/usr/share/logstash/data
      - ./logstash_ingest_data/:/usr/share/logstash/ingest_data/
      - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - xpack.screenshotting.browser.chromium.disableSandbox=true
    mem_limit: ${KB_MEM_LIMIT}
    networks:
      - elk
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat:
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: elastic/metricbeat:${STACK_VERSION}
    user: root
#    command: >
#      /bin/bash -c "chmod go-w /usr/share/metricbeat/metricbeat.yml && exec metricbeat -c /usr/share/metricbeat/metricbeat.yml"
    networks:
          - elk
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata:/usr/share/metricbeat/data
      - ./elk/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600

  apm-server:
    image: elastic/apm-server:${STACK_VERSION}
    depends_on:
      - kibana
    cap_add: [ "CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID" ]
    cap_drop: [ "ALL" ]
    ports:
      - 8200:8200
    networks:
      - elk
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

networks:
  elk:
  ride:
  kafka:
  driver:
  rating:
  gateway:
  payment:
  passenger:
  discovery:
